#include <iostream>
using namespace std;

// 행렬곱 재귀 코드
long long seq(int* data, int start, int end) {
	// 1개일 때는 0
	if (end - start == 1) return 0;
	// 2개 이상일 때는 start * mid * end
	long long* store = new long long[end - start - 1];
	for (int i = start+1; i < end; i++) {
		store[i-start-1] = seq(data, start, i) + seq(data, i, end) + data[start] * data[i] * data[end];
	}
	long long min = 100000000000;
	for (int i = 0; i < end - start - 1; i++) {
		if (min > store[i]) min = store[i];
	}
	return min;
}

// 재귀+메모
// 행렬의 최대 곱 갯수 100, 원소 101개
// 그냥 앞-뒤 따라서 100x100 만들자
// row는 0~99, col은 1~100
long long table[100][100];
long long seqMemo(int* data, int start, int end) {
	// memo
	if (table[start][end-1]) return table[start][end-1];
	// 1개일 때는 0, 이 케이스는 메모가 되진 않으나 하나 안하나 if문 하나 차이
	if (end - start == 1) return 0;
	// 2개 이상일 때는 start * mid * end
	long long* store = new long long[end - start - 1];
	for (int i = start + 1; i < end; i++) {
		store[i - start - 1] = seqMemo(data, start, i) + seqMemo(data, i, end) + data[start] * data[i] * data[end];
	}
	long long min = 100000000000;
	for (int i = 0; i < end - start - 1; i++) {
		if (min > store[i]) min = store[i];
	}
	// 메모
	table[start][end-1] = min;
	return min;
}


int main() {
	int num;
	cin >> num;
	int numMat;
	for (int i = 0; i < num; i++) {
		// table 초기화
		for (int j = 0; j < 100; j++) {
			for (int k = j; k < 100; k++) {
				table[j][k] = 0;
			}
		}
		cin >> numMat;
		int* data = new int[numMat + 1];
		for (int j = 0; j < numMat + 1; j++) {
			cin >> data[j];
		}
		// cout << seq(data, 0, numMat) << endl;
		// cout << seqMemo(data, 0, numMat) << endl;

	}
}


// 행렬곱 dp+경로출력
long long dptable[100][100];
char dpmemo[100][100][500];
int main() {
	int num;
	cin >> num;
	int numMat;
	for (int q = 0; q < num; q++) {
		cin >> numMat;
		int* data = new int[numMat + 1];
		for (int j = 0; j < numMat + 1; j++) {
			cin >> data[j];
		}
		// dptable 초기화
		for (int i = 0; i < numMat; i++) {
			for (int j = 0 ; j < numMat; j++) {
				dptable[i][j] = 0;
			}
		}
		// dpmemo 초기화
		for (int i = 0; i < numMat; i++) {
			for (int j = 0; j < numMat; j++) {
				for(int k = 0; k < 500;k++){
					dpmemo[i][j][k] = ' ';
				}
			}
		}
		// 출력 형식 맞추기
		for (int i = 0; i < numMat; i++) {
			for (int j = 0; j < numMat; j++) {
				if (i == j) {
					dpmemo[i][j][0] = 'M';
					int temp = i + 1;
					if (temp == 100) {
						dpmemo[i][j][1] = '1';
						dpmemo[i][j][2] = '0';
						dpmemo[i][j][3] = '0';
					}
					else if (temp >= 10) {
						dpmemo[i][j][1] = temp/10 + '0';
						dpmemo[i][j][2] = temp%10 + '0';
					}
					else dpmemo[i][j][1] = temp + '0';
					
				}
			}
		}
		// 바텀업으로 처음부터 끝까지 다 채울 것
		// 이 과정에서 경로를 저장해야 함
		for (int i = 0; i < numMat; i++) {
			for (int j = i; j >= 0; j--) {
				if (i == j) {
					dptable[i][j] = 0;
					continue;
				}
				// else
				long long* store = new long long[i-j];
				for (int k = 0; k < i - j; k++) {
					store[k] = dptable[i-1-k][j] + dptable[i][i-k] + data[j] * data[i-k] * data[i+1];
				}
				long long min = 100000000000;
				// 최솟값 뽑기, 경로 확인
				int idx0;
				for (int k = 0; k < i - j; k++) {
					if (min > store[k]) {
						min = store[k];
						idx0 = k;
					}
				}
				dptable[i][j] = min;
				// 경로 저장
				int idx1 = 0;
				int idx2 = 0;
				int idx3 = 0;
				dpmemo[i][j][idx1++] = '(';
				while (dpmemo[i-1-idx0][j][idx2] != ' ') {
					dpmemo[i][j][idx1++] = dpmemo[i - 1 - idx0][j][idx2++];
				}
				while (dpmemo[i][i - idx0][idx3] != ' ') {
					dpmemo[i][j][idx1++] = dpmemo[i][i - idx0][idx3++];
				}
				dpmemo[i][j][idx1++] = ')';
			}
		}
		// 경로와 답 출력
		int i = 0;
		while(dpmemo[numMat - 1][0][i] != ' ') cout << dpmemo[numMat - 1][0][i++];
		cout << endl;
		cout << dptable[numMat-1][0] << endl;
	}
}
